[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "homeassistant-middleatlantic-racklink"
version = "1.0.0"
description = "Home Assistant integration for Middle Atlantic RackLink PDUs with Redfish and Telnet support"
readme = "README.md"
authors = [{ name = "mckay115", email = "" }]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
]
requires-python = ">=3.11"
dependencies = ["aiohttp>=3.8.0", "zeroconf>=0.47.0", "voluptuous>=0.13.0"]

[project.urls]
Homepage = "https://github.com/mckay115/homeassistant-middleatlantic-racklink"
Documentation = "https://github.com/mckay115/homeassistant-middleatlantic-racklink/blob/main/README.md"
Repository = "https://github.com/mckay115/homeassistant-middleatlantic-racklink"
"Bug Tracker" = "https://github.com/mckay115/homeassistant-middleatlantic-racklink/issues"
Changelog = "https://github.com/mckay115/homeassistant-middleatlantic-racklink/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = { "" = "." }
packages = ["custom_components.middle_atlantic_racklink"]

[tool.setuptools.package-data]
"custom_components.middle_atlantic_racklink" = [
    "*.json",
    "*.yaml",
    "brands/*.png",
]

# Code formatting and linting
[tool.black]
line-length = 88
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["custom_components"]
known_third_party = ["homeassistant"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
force_alphabetical_sort = true

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203", # whitespace before ':'
    "W503", # line break before binary operator
    "E501", # line too long (handled by black)
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
    ".tox",
    "build",
    "dist",
]

# Testing
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=custom_components/middle_atlantic_racklink",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["custom_components/middle_atlantic_racklink"]
omit = ["*/tests/*", "*/test_*.py", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
    "except ImportError:",
    "@abstractmethod",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

[[tool.mypy.overrides]]
module = [
    "homeassistant.*",
    "zeroconf.*",
    "voluptuous.*",
    "pytest_homeassistant_custom_component.*",
]
ignore_missing_imports = true

# Linting
[tool.pylint.master]
extension-pkg-whitelist = ["pydantic"]
ignore = [
    "CVS",
    ".git",
    ".hg",
    ".tox",
    ".eggs",
    "*.egg",
    "__pycache__",
    ".venv",
    "venv",
]
jobs = 0
persistent = true
suggestion-mode = true
unsafe-load-any-extension = false

[tool.pylint.messages_control]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "missing-module-docstring",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-instance-attributes",
    "too-many-public-methods",
    "too-many-locals",
    "too-many-branches",
    "too-many-statements",
    "too-many-arguments",
    "broad-except",
    "import-error",
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-parents = 7
max-attributes = 20
min-public-methods = 1
max-public-methods = 30
max-args = 10
max-locals = 20
max-returns = 6
max-branches = 15
max-statements = 60

# Security scanning
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"] # Skip assert_used and shell_injection for tests

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]
